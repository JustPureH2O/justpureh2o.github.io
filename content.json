{"meta":{"title":"JustPureH2O的博客","subtitle":"深水摸大鱼","description":"JustPureH2O的小窝","author":"JustPureH2O","url":"https://justpureh2o.github.io","root":"/"},"pages":[{"title":"友情链接","date":"2023-11-04T03:04:22.867Z","updated":"2023-10-26T09:06:37.321Z","comments":true,"path":"friends/index.html","permalink":"https://justpureh2o.github.io/friends/index.html","excerpt":"","text":""},{"title":"DC Doujin 同人创作","date":"2023-11-04T08:33:40.000Z","updated":"2023-11-04T08:53:29.150Z","comments":true,"path":"dcdoujin/index.html","permalink":"https://justpureh2o.github.io/dcdoujin/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2023-11-04T03:04:22.866Z","updated":"2023-10-26T08:58:13.786Z","comments":true,"path":"categories/index.html","permalink":"https://justpureh2o.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-11-04T03:04:22.865Z","updated":"2023-10-26T09:09:01.873Z","comments":true,"path":"404.html","permalink":"https://justpureh2o.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有标签","date":"2023-10-26T08:56:08.000Z","updated":"2023-10-26T08:57:03.066Z","comments":true,"path":"tags/index.html","permalink":"https://justpureh2o.github.io/tags/index.html","excerpt":"","text":""},{"title":"memes","date":"2023-11-04T08:33:30.000Z","updated":"2023-11-04T08:33:30.823Z","comments":true,"path":"memes/index.html","permalink":"https://justpureh2o.github.io/memes/index.html","excerpt":"","text":""},{"title":"","date":"2023-10-26T08:03:52.000Z","updated":"2023-10-26T08:55:42.018Z","comments":true,"path":"about/index.html","permalink":"https://justpureh2o.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"常用算法模板","slug":"common-algo-templates","date":"2023-10-28T06:11:51.000Z","updated":"2023-11-04T08:49:35.890Z","comments":true,"path":"2023/10/28/common-algo-templates/","link":"","permalink":"https://justpureh2o.github.io/2023/10/28/common-algo-templates/","excerpt":"","text":"1. Trie树（字典树） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;#define N 10010using namespace std;int son[N][70], idx = 0, cnt[N];int map(char c) &#123; // 字符映射到对应数字 if (c &gt;= &#x27;0&#x27; &amp;&amp; c &lt;= &#x27;9&#x27;) return c - &#x27;0&#x27;; if (c &gt;= &#x27;a&#x27; &amp;&amp; c &lt;= &#x27;z&#x27;) return c - &#x27;a&#x27; + 11; if (c &gt;= &#x27;A&#x27; &amp;&amp; c &lt;= &#x27;Z&#x27;) return c - &#x27;A&#x27; + 37;&#125;void insert(char s[]) &#123; // 插入一个字符串 int len = strlen(s); int p = 0; // 指针 for (int i = 0; i &lt; len; i++) &#123; // 遍历字符串中每一个字符 int u = map(s[i]); // 映射到数字 if (!son[p][u]) son[p][u] = ++idx; p = son[p][u] // 更新指针，指向下一个节点 &#125; cnt[p]++;&#125;bool query(char s[]) &#123; // 查询一个字符串 int len = strlen(s); int p = 0; for (int i = 0; i &lt; len; i++) &#123; // 遍历+查找 int u = map(s[i]); if (son[p][u]) p = son[p][u]; else return false; &#125; return cnt[p];&#125;int count(char s[]) &#123; // 对指定字符串计数 int len = strlen(s); int p = 0; // 可以用 if (query(s)) 代替下边的遍历查找 for (int i = 0; i &lt; len; i++) &#123; int u = map(s[i]); if (son[p][u]) p = son[p][u]; else return 0; &#125; return cnt[p];&#125; 并查集 123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;#define N 10010using namespace std;int p[N];int find(int x) &#123; // 查找父节点+路径压缩 if (p[x] != x) p[x] = find(p[x]); return p[x];&#125;void merge(int a, int b) &#123; // 合并两个集合 p[find(a)] = find(b);&#125;bool query(int a, int b) &#123; // 查询两个节点是否在同一个集合中 return find(a) == find(b);&#125; 单调队列 123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;#define N 10010using namespace std; struct Node &#123; int idx; // 下标 int val; // 数值 &#125; nodes[N];deque&lt;Node&gt; q;void peak(int k) &#123; // 查找区间最值，n为数组大小，k为区间大小，即区间中有k个元素 for (int i = 1; i &lt;= N; i++) &#123; // while (!q.empty() &amp;&amp; nodes[i].val &lt;= q.back().val) q.pop_back(); // 查找区间最小值，将大于号改为小于号 while (!q.empty() &amp;&amp; nodes[i].val &gt;= q.back().val) q.pop_back(); // 当新进元素大于队尾元素，删除队尾直到队尾大于新元素，或者直到队列为空 q.push_back(nodes[i]); // 将新进元素压入队尾 if (i - q.front().idx == k) q.pop_front(); // 滑出队头元素所在区间，弹出队头 if (i &gt;= k) cout&lt;&lt;q.front().val&lt;&lt;endl; &#125; &#125; 单调栈 12345678910111213141516171819202122#include &lt;bits/stdc++.h&gt;#define N 10010using namespace std; struct Node &#123; int idx; // 下标 int val; // 数值 &#125; nodes[N];stack&lt;Node&gt; stk;int ans[N];void NGE(int k) &#123; // 查找下一个更大的元素，即NGE问题 for (int i = 1; i &lt;= N; i++) &#123; // while (!stk.empty() &amp;&amp; nodes[i].val &lt; stk.back().val) // NSE问题，下一个更小的元素，仅改变大于小于号 while (!stk.empty() &amp;&amp; nodes[i].val &gt; stk.top().val) stk.pop(); // 将栈顶比当前更小的元素弹出 if (stk.empty()) ans[i] = 0; // 查无 else ans[i] = s.top(); // 顶为最大 stk.push(nodes[i]); // 压入当前 &#125; &#125; 单源最短路径 朴素Dijkstra 12345678910111213141516171819202122232425262728#include &lt;bits/stdc++.h&gt;#define N 10010#define INF 0x3f3f3f3fusing namespace std;// 对于稠密图，使用邻接矩阵存图int g[N][N], dist[N];bool st[N];int n; void dijkstra() &#123; memset(dist, INF, sizeof dist); // 初始化距离，开始时均为正无穷，或者为-1 dist[1] = 0; // 起点最短路径就是0 for (int i = 1; i &lt;= n; i++) &#123; int t = -1; for (int j = 1; j &lt;= n; j++) &#123; if (!st[j] &amp;&amp; (t == -1 || dist[j] &lt; dist[t])) t = j; // 循环所有未确定距离的点，找出最小值 &#125; st[t] = true; // 标记访问 for (int j = 1; j &lt;= n; j++) &#123; dist[j] = min(dist[j], dist[t] + g[t][j]); // 间接的路径：从起点经t再连接到j点 &#125; &#125;&#125; 单源最短路径 堆优化Dijkstra 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;bits/stdc++.h&gt;#define N 10010#define INF 0x3f3f3f3fusing namespace std;// 对于稀疏图，使用接表存图int head[N], e[N], w[N], ne[N];int idx = 0;void add(int a, int b, int x) &#123; idx++; e[idx] = b; w[idx] = x; ne[idx] = head[a]; head[a] = idx;&#125;int dist[N];bool st[N];int n;typedef pair&lt;int, int&gt; PIR; // 二元组存储点序号-距离 priority_queue&lt;PIR, vector&lt;PIR&gt;, greater&lt;PIR&gt; &gt; heap; void dijkstra() &#123; memset(dist, INF, sizeof dist); // 初始化距离，开始时均为正无穷，或者为-1 heap.push((PIR) &#123;1, 0&#125;); // 初始点入队，序号为1距离为0 while (!heap.empty()) &#123; // 堆不空时 PIR t = heap.top(); // 优先队列，队头元素总为未确定点中最近的一个 int id = t.first, dis = t.second; if (st[id]) continue; for (int i = head[id]; ~i; i = ne[idx]) &#123; int j = e[i]; // 边终点 if (dist[j] &gt; dis + w[i]) &#123; dist[j] = dis + w[i]; // 更新最短距离 heap.push((PIR) &#123;j, dist[j]&#125;); // 更新的点压入优先队列 &#125; &#125; &#125;&#125; 背包类动态规划 01背包 想象你在一个绝版手办售卖会上。这里的每种手办由于需要保证它的稀有程度，活动主办方提前向卖家商议了一个计策：即保证每种老婆 手办有且只能有一个。这样他们就可以开出天价 （但要保证在物价局划定的价格上限内） （爆long long也没问题！）。那么作为一个资深 御宅 手办收藏家的你，自然不会错过这次难得的机会，你出门时偷偷拿走了麻麻の钱包，发现里面有\\(N\\)元现金（假定你不知道麻麻の银行卡密码），那么你可以买到手办的最大价值是多少？ 1234567891011121314151617181920#include &lt;bits/stdc++.h&gt;#define N 100010using namespace std;int w[N], v[N], dp[N];// 价值 占地 容量上限为N时最大价值 int main() &#123; for (int i = 1; i &lt;= n; i++) &#123; // 对于每个物品，从1到n for (int j = c; j &gt;= v[i]; j--) &#123; // 倒着循环，c为容量上限，防止做减法时减为负数内存异常 dp[j] = max(dp[j], dp[j - v[i]] + w[i]); // 状态递推（一维压缩） // 若不选该物品，则状态的剩余容量仍然为j，若选择则为j-v[i]，相应的需要加上物品价值 &#125; &#125; cout&lt;&lt;dp[c]; return 0; &#125; 但是最后还是被麻麻发现力（悲 背包类动态规划 完全背包 这种问题类似于西方魔幻小说里的情节：一位勇士无意间闯进了古代君王的藏宝阁，受金钱和权力的蛊惑。看着地上不尽的金币与皇冠，他拿出了一个麻袋。他想要在麻袋规定的最大容量内装尽可能最大价值的物品，超出规定容量，这个袋子很可能破掉，导致财宝落入山谷、沼泽等任何危险的地方。这位勇士十分谨慎，他不希望总重量超过额定重量，那么他能装的最大物品价值是多少？ 12345678910111213141516171819202122232425#include &lt;bits/stdc++.h&gt;#define N 100010using namespace std;int w[N], v[N], dp[N];// 价值 占地 容量上限为N时最大价值 int main() &#123; // 完全背包，即每个物品数量有无限个，可以自由装配 for (int i = 1; i &lt;= n; i++) &#123; // 对于每个物品，从1到n for (int j = v[i]; j &lt;= c; j++) &#123; // 正着循环，与01背包相反，c为容量上限 // 由于计算当前状态需用到dp[j-v[i]]状态，若升序循环，这个状态总会在前几步被算出 dp[j] = max(dp[j], dp[j - v[i]] + w[i]); // 状态递推（一维压缩） // 若不选该物品，则状态的剩余容量仍然为j，若选择则为j-v[i]，相应的需要加上物品价值 // dp[i][j] = max(dp[i - 1][j], dp[i][j - v[i]] + w[i]) // 若不选择当前物品，最大价值为dp[i-1][j]，即前一个/i-1个物品，容量上限为j (j&lt;=c)时的最大价值 // 若选择当前物品，最大价值为dp[i][j-v[i]]+w[i]，因为每种物品可以放入无限个，放入第i个物品后仍然可以继续放入相同物品直到超出容量上限j &#125; &#125; cout&lt;&lt;dp[c]; return 0; &#125; 然而我们的勇士痴迷于装入财宝，忽视了高悬在他头顶的致命机关，随着绳子断裂，我们的勇士就此葬身于这个隐蔽的藏宝阁中，带不走任何一枚金币。因此我们的最大价值应该是\\(0\\) 因此我们应该拒绝这种来历不明的诱惑，青少年反诈，从我做起！ 背包类动态规划 多重背包 《竞赛班传奇》 第一部，第一幕 人物：“和蔼可亲滴”福建籍物理竞赛教练 茂华；“偷奸耍滑的”山东老家OIer 国祯；“热心尽职喜欢让同学们多多预习物理知识的”物理课代表曹牧 茂华上场，开玩笑的语气说 茂华： 电荷量滴单位是~库 仑，符号C（写下一个大C），艹！ 全班哄笑，国祯猥琐的笑，茂华眉头一蹙，表情严肃，严肃语气 茂华： 国祯！还在那里笑，曹牧，检查一下国祯有没有记笔记！ 曹牧起身走向国祯，其他人目光盯着曹牧，国祯将物理书翻开，指着笔记处，曹牧低头查看，然后抬头 曹牧： 他写了，但是…… 严肃的，急速的，愤怒之极的，气震寰宇的，振聋发聩的，势如破竹的，响彻云霄的，如雷贯耳的，不共戴天的，耳机党爆炸的，外放党社死的 茂华： 站起来！没写笔记！ 国祯吓一跳，乖乖站起，曹牧缓缓退回，众人起哄国祯，茂华声音略小 茂华： 在这里偷奸耍滑是会被刷出去滴。到时候你竞赛搞不好，高考也考滴西撇，看你到时候怎么办！ 国祯： （解释的语气）我没有偷奸耍滑！ 茂华语气有所缓和 茂华： 那你把这道题解出来，你就可以坐下了 题面： 给定\\(N\\)个物品，背包最大容量\\(C\\)。对于第\\(i\\)种物品，给定每个\\(i\\)种物品的大小\\(V_i\\)，价值\\(W_i\\)，以及个数\\(S_i\\)，试求出背包可以装下物品的最大价值\\(A\\)。 国祯小嘴一撇，这还不简单？他立马拿起了一支0.5mm的黑色签字笔在草稿纸上飞速演算。得益于他积累了一坤年的OI知识，2分钟后，在众人惊异的目光中，国祯自信满满地拿出了写有正确答案的草稿纸。他将右手伸得十分用力，好像要把草稿纸怼到茂华脸上一样，他的嘴角浮现出一抹byd笑容。 只见茂华呆立原地，嘴巴微张，如同按下了暂停键。3秒钟的寂静过后，下课铃如同国祯的战鼓一般敲响，宣告这次对决以国祯的大比分取胜而落下帷幕。茂华直立的双腿尴尬的向门口转去，颤抖的双唇之间轻飘飘冒出了两个字：“下课”。随后咬紧嘴唇，一步一步踱向门外。 国祯如获新生。在众人崇拜和惊诧的目光中，他迷失了自我，他快步走向一体机，熟练地打开希沃白板，好像已经练习过成千上万遍似的，将一句话加粗写在了白板上： 通常情况下，多重背包的思路是将一堆A物品拆分成n个A物品，每个物品只能使用一次，便可转化为01背包问题 他不管大家是否了解01背包的含义，他此刻只想在众人面前分享打败茂华的喜悦感，以及打败茂华所需要的知识，这又何尝不是一种爱屋及乌的思想呢？ 第二天，当上午的物理课准时来到，茂华却没有准时跨进教室的门。通常情况下，他每次课前都会提前2分钟来到教室里对同学进行题目过关。 1分钟后，茂华挟着几本不合身份的普及组信息竞赛导论及考纲，昂首阔步地走进了一班教室。他大声说着：“通常情况下。这是国祯同学昨天下课后给你们上的课里的一句原话！” 原来茂华前一天下课后并没有跑回办公室又哭又闹大发牢骚，而是现场网购了信息竞赛教程，准备在第二天的物理课上给国祯单独上节课：学生是永远无法击败老师滴！ 他打开了浏览器，输入一行神秘的IP地址，按下回车，一个界面清爽的网站跳了出来。顶端用紫色的大写字母写着MHOI四个大字。 “牛逼吧，这是我连夜赶工自创的网站，”他笑着打开了题目列表中的第一道题，标题： 国祯接招 。国祯轻蔑地瞥了一眼，题干还是昨天那样，一模一样，“看好了国祯，”他指向下排的一行小字，“数据范围：\\(n \\leq 10000\\)！看你那吃了食的小脑袋还能不能算出这道题目。” 显然，茂华是有备而来，国祯倒吸一口冷气。手工计算绝对是行不通了，但是对于竞赛班的高思娃国祯，绝对是有两把刷子的，毕竟正如茂华所说：“偷奸耍滑耍小聪明早就被刷下去了”。 面对如此巨大的物品总数，一些牛逼娃想到了用二进制拆分表示物品个数的方法。尽管换汤不换药，本质还是一个01背包问题，但是经过祖先们灵魂的注入，茂华是肯定不敢把你踢出竞赛班滴。 \\(For Example\\) 假设原有10个价值为2的物品，将10分为1+2+4+3，等同于有4个不同的01物品，价值分别为12=2，22=4，42=8，32=6，即2，4，8，6 国祯很快在VSCode上写出了一段教科书式的、注释易懂的模板代码，这次就算是物竞数竞化竞生竞的人也可以轻易看懂了： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;bits/stdc++.h&gt;#define N 100010using namespace std;int w[N], v[N], dp[N];// 价值 占地 容量上限为N时最大价值 int idx = 0;// 记录数组下标 int main() &#123; int n, c; cin&gt;&gt;n&gt;&gt;c; for (int i = 1; i &lt;= n; i++) &#123; int a, b, s; // v w n // 即体积，价值，个数 cin&gt;&gt;a&gt;&gt;b&gt;&gt;s; int k = 1; // 记录2的幂，初始值为2的0次幂，即1 //if (s == 0) s = INF; // 当题目中说数量0时默认为无限次时可以使用，这其实已经属于混合背包（多重+完全）的范畴 while (k &lt;= s) &#123; // 个数可以继续被分解 s -= k; // 更新个数 idx++; // 新的下标 v[idx] = a * k; // 分解后该物品的大小 w[idx] = b * k; // 分解后该物品的价值 k *= 2; // k更新为2的下一个幂 &#125; if (s) &#123; // 若无法被完全分解，剩下一部分 idx++; // 记录新的下标 v[idx] = a * s; // 大小 w[idx] = b * s; // 价值 &#125; &#125; // 01背包模板 for (int i = 1; i &lt;= n; i++) &#123; for (int j = c; j &gt;= v[i]; j--) &#123; dp[j] = max(dp[j], dp[j - v[i]] + w[i]); &#125; &#125; cout&lt;&lt;dp[c]; return 0; &#125; 国祯长舒一口气，这次他又获得了胜利。评测点加载了几秒。国祯定住了，#10号点出现一个大大的\\(Wrong Answer\\)。国祯感觉堕入了万丈深渊，只见茂华狂笑了起来，带动全班其他同学的笑容，一班霎时被笑声吞没。国祯盯着评测信息，\\(783ms\\)的运行时间让他更为疑惑，莫非茂华手动写了一个错误答案？ 国祯尴尬的转向各位同学，其他同学瞬间停止了笑容。先前还在交头接耳的同学们如同机器一般齐刷刷的转向国祯，给人一种惊悚透骨的感觉。他们异口同声张开了嘴，在茂华扭曲的笑容下，说出了让国祯后悔了一辈子的话来： “三年OI一场空，不开long long见祖宗！” \\[\\mathcal {OVER}\\] 背包类动态规划 混合背包 混合背包，顾名思义。它混合了多种背包，实际应用中这一类问题比较有现实意义。主要思路是，将分属于各个类型背包的物品用几个条件判断语句写出来，然后分别套用各类背包的解决方案进行求解。 123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;#define N 100010using namespace std;int w[N], v[N], dp[N];// 价值 占地 容量上限为N时最大价值 int main() &#123; for (int i = 1; i &lt;= n; i++) &#123; if (A) &#123; // 01背包物品，写01背包模板 &#125; if (B) &#123; // 完全背包物品，写完全背包模板 &#125; if (C) &#123; // 其他…… &#125; &#125; return 0; &#125;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://justpureh2o.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"学术","slug":"学术","permalink":"https://justpureh2o.github.io/tags/%E5%AD%A6%E6%9C%AF/"},{"name":"OI","slug":"OI","permalink":"https://justpureh2o.github.io/tags/OI/"}]},{"title":"国祯文集","slug":"gz-articles","date":"2023-10-26T09:29:45.000Z","updated":"2023-11-04T08:27:07.535Z","comments":true,"path":"2023/10/26/gz-articles/","link":"","permalink":"https://justpureh2o.github.io/2023/10/26/gz-articles/","excerpt":"","text":"曾茂华到底有多六 ——By 国祯 曾茂华是中国当代著名的科学家和教育家，他以“慈父”、“良师”、“学者”等称号闻名于世。 1：曾茂华的蠢行为 曾茂华的蠢行为: 他在大学期间参加了一个乐队，并担任主唱。然而，不幸的是，由于自己的疏忽，他犯下了一件愚蠢的事情——用刀砍掉了对方的手指头。这件事让他成了学校里的头号人物之一。从那以后，他再也不敢做任何愚蠢的事情了。这是因为他害怕自己会被开除出乐队或者成为众矢之的的对象。如果他继续做出这些错误的举动，那么他会失去自己的乐队成员资格，甚至还会遭到开除。所以，为了避免发生这样的悲剧，他必须要记住：永远不要犯错！ 2：为什么他会做出这种愚蠢的事情? 曾茂华的蠢行为发生在他身上，是因为他自己没有意识到他自己的愚蠢。他不知道怎么做才能让事情变得更好，他只想走捷径，而不是去努力做好事情。这种心态会导致他做出错误的决定，因为他会忽略一些重要的信息，或者选择性地记住某些信息。当我们看到一个人犯了下述三种类型的罪时，我们通常就能预测到这个人会再犯同样的问题：1. 根本不会思考问题2. 一味追求便利3. 盲目模仿别人 3: 该如何面对这个问题? 要想解决问题,首先要认识到自己的行为是愚蠢的。只有当你明白自己做了什么蠢事时,才能够改变你的行为来避免这种错误。其次，不要让别人知道你所犯下的错误。这并不是因为你不想坦白自己所犯错误,而是因为这样会给别人带来困扰。最后,如果你真的想要解决这个问题,可以尝试通过一些有趣的方式来实现它。例如,你可以去找一位专业人士帮助你分析一下这件事情,或者试着去找到一个愿意与你分享观点和建议的人。总之,如果你认为自己的行为很蠢,那么就要大胆地承认出来。只有敢于直面自己的无知,才能真正地改善自己的生活。 曾茂华先生不仅对科学领域做出了巨大贡献，而且为国家培养出一批优秀的人才。这些人中不乏有牛顿这样伟大的人物，也有王选这样杰出的人物。","categories":[],"tags":[{"name":"国祯","slug":"国祯","permalink":"https://justpureh2o.github.io/tags/%E5%9B%BD%E7%A5%AF/"},{"name":"整活","slug":"整活","permalink":"https://justpureh2o.github.io/tags/%E6%95%B4%E6%B4%BB/"},{"name":"文章","slug":"文章","permalink":"https://justpureh2o.github.io/tags/%E6%96%87%E7%AB%A0/"}]},{"title":"CSP-J 2023 游记","slug":"journey-to-the-cspj2023","date":"2023-10-24T08:21:36.000Z","updated":"2023-10-24T11:41:18.000Z","comments":true,"path":"2023/10/24/journey-to-the-cspj2023/","link":"","permalink":"https://justpureh2o.github.io/2023/10/24/journey-to-the-cspj2023/","excerpt":"","text":"又名：《第一次考就被小学生薄纱的一集》 本次考场：绵阳东辰国际学校 第一节 赛前准备 插一句：CSP-J 2023没有设置赛前试机环节（包括CSP-S，成都绵阳都这样），个人推测可能是由于开放自选Windows和Linux系统带来的结果。如果你听见诸如：不要操作电脑，违者将作作弊处理 的话时，请将你按捺不住的双手安稳的放在双腿上，避免出现意料之外的事来。 然而赛前试机仍然是必要的一环（但是如果考场纪律有要求那就算了），因为这样可以让选手对机器有一个初步的了解。因为我本人习惯使用Win+E打开文件系统管理器，用Win+V记录剪切板数据，可是这些功能在考场电脑上都无法使用，进行赛前试机不仅可以避免因赛时临时发现无法使用某些功能而带来的苦恼（心态爆炸点+1），而且还可以将IDE环境调整到个人喜欢的状态（例如缺省源代码，相当于每次新建代码不用重新打头文件）。选手可以不占用正式比赛时间完成一些个性化操作，方便赛时操作，其重要性不言而喻。 当然，开赛前乱猜试题PDF密码是极其无意义且几乎不可能成功的一件事，更不要使用暴力破解密码工具破解文件（相信守规矩的你也不会将这种工具带进考场里来），这么做不仅会被当做作弊者处理，而且造成的数据丢失也只能由你自己负责。 第二节 开赛之初 考场下发的PDF文件带有密码保护，输入时请务必瞪大眼睛区分大小写字母O、o与数字0；小写字母l、大写字母I与数字1，并且将其中的特殊字符认真核对一遍。本次考试，我有幸将密码中的数字0写成了小写字母o，于是浪费了宝贵的2分钟时间改正密码（真实情况是监考老师在黑板上书写密码时字迹不规范导致的混淆）。因此需要认真看好你的密码。 就我认为：在一开始就仔细写好文件重定向输入输出是极其重要的，因为随着考试时间的推进，你的思考重点将从细节性问题变为如何拿到更多的分数上（骗分）。你就会忽略重新写上两行重定向IO的代码，因而可能Au-&gt;Cu，光荣AFO。为了引起你的注意，使用极长的注释双斜线是可行的，我本人习惯打上断点。例如： 12//////////////////////////////////////////////// freopen(&quot;uqe.in&quot;, &quot;r&quot;, stdin);//////////////////////////////////////////////// freopen(&quot;uqe.out&quot;, &quot;w&quot;, stdout); 将比 12//freopen(&quot;uqe.in&quot;, &quot;r&quot;, stdin);//freopen(&quot;uqe.out&quot;, &quot;w&quot;, stdout); 显眼得多——尤其是当你喜欢为每行代码写上包含心血的易懂注释时。事后你可以通过长按Ctrl+逗号（Dev-C++）的方式快速且安全的删除这些斜线。 不仅如此，看好输入输出文件名也是一个非常重要的细节，建议直接复制粘贴。对于标准样例，直接选中PDF文字再复制一般都不是一个明智的做法，手动输入也是可行的，但是对拍有时会比较繁琐（例如普及组T3的样例）。这边传授一个方便的做法：选中代码左侧序号，在WPS中直接右键菜单点击消除文字即可（本次考试我就是使用的这个方便技巧快捷复制样例数据）。最好找张纸记下来，后面会讲到原因。 顺利解锁了PDF文件，你要做的第一件事就是将四道题全部读熟。对整场比赛的题目有大致的规划，有可能你先前做题时做过与T4极其相似的题目，那么放弃显然是一个很不划算的决策。将题目读熟，大概判断一下算法实现，评估自己哪些题能做好，哪些题要放一放/完全放弃。知己知彼方能百战百胜。 赛初的状态基本上决定了你整场比赛的表现，因此在赛初就做好一切细节方面的完全准备，对你的信心增长是非常重要的！ 第三节 赛中时期 那么你现在拿到了第一题（信心题）。一般来说，CSP的复赛，算法很少裸露地出现在题目之中，前两题近似看作数学题。保证你的数学思维在线，因为第一题的思路可能千奇百怪，如果你一段时间没有思路（对于第一题大概是5~15分钟），可以考虑先做其他题目。刷新一下思维定势，有可能T1的灵感就乍现于其他题目之中。 在符合时间规划的前提下尽可能多去造hack数据，写出一段代码（尤其是T3放大模拟时）后，千万保证没有任何逻辑问题。当然，不是所有人都能只看代码就能检查的出其中的逻辑漏洞。因此你需要多造hack数据。hack数据多数情况下包括这几个要素：方程的特殊解、极端值/边界值、大数据（int越界）。在规划好的时间内想尽办法为你的代码多挑几根刺出来，你的代码才能更加趋近于满分解。 千万不要看你旁边的人！！！除非S组巨佬闯进了J组蒟蒻区，否则千万不要在比赛中途去看任何人的任何行为。一方面，你的行为可能被视作交谈作弊（喜提CCF全国通报、禁赛3年大礼包）；另一方面，如果你抱着嘲笑别人的心态去观察别人，那么你的脸很可能就会被你自己打烂。我在考试时因为瞧不起隔壁的一位小学生，当他开始疯狂敲代码时，我自己的心态就爆炸了——把所有人，不分男女、年龄高低，都当作你的敌人，轻视则死。同时这也给你带来一部分紧张感，会使你的发挥更佳。 给自己适当的放松与勉励，要相信，上天不是无故给你这个周末不用冒着风雨大太阳上补习班的珍贵机会（对于高中生，则是周六不用坐在教室里上正课的机会）。当你完全确认你的代码已经完美无瑕时，告诉自己：同学们都还在悲催的上着课，我却在外边快乐的敲着代码。如此一来可以起到调整心态的作用。 别激动到顺手关了PDF文件。如果你还记得或者是在草稿纸上写了密码，那无所谓；但是如果你没写，你的处境就非常尴尬，这时你可以举手找老师再要，但这绝对对你的心态是一个不小的打击。 第四节 赛末时期 经历三个半小时的不懈奋斗，比赛终于迎来最后的半小时。无论你的完成情况如何，一定要用这最后的时间好好检查一下你的代码。瞄一眼你是否有与下面类似的代码： 12freopen(&quot;uqe2.in&quot;, &quot;r&quot;, stdin); // 危freopen(&quot;uqe2.out&quot;, &quot;w&quot;, stdout); // 爆零警告 这段代码的主人是个懒人无疑了，如果你把CCF提供的附加样例复制了出来。切记最后把文件名里的序号删除，否则你就可以AFO了。 或者以下的代码： 1234#include &lt;Windows.h&gt;//其他的代码if (system(&quot;fc uqe.out uqe.ans&quot;)) cout&lt;&lt;&quot;WA&quot;&lt;&lt;endl;else cout&lt;&lt;&quot;AC&quot;&lt;&lt;endl; 这位同学也是个Windows爱好者受害者无疑了，CCF明文规定了测试用系统为NOI Linux。因此不存在Windows.h这个头文件，如果你忘记删除了，那一定是个大大滴CE。正式比赛时，用bits/stdc++.h万能头即可(Windows和Linux通用）。我有一个考S组的朋友，因为忘记删除这个对拍头文件而喜提一个0分，直接亏大发。 不要忘记将你的重定向取消注释。你连读入输出都没有了，属实是可以AFO了。最后三分钟，请将你的蹄子挪开键盘鼠标。否则可能会越改越慌，不妨好好回想一下这周老师留了什么作业，你缺了哪些课需要去补，总之不要再动你的鼠标键盘了！如果实在是不放心编译问题，按一下F11，通过即可。保证你的工作目录下只留.cpp文件，所以将你复制的样例文件和编译的exe文件全部删除。 第五节 考试结束 请你千万保持冷静，不要习惯性地把机器关机了。CCF明文规定：由关机造成的数据损失，责任由考生自负。只需要把你的IDE关闭就好。 回家后，把周一要交的作业补好。别再谈考试的事情了，让你自己有个好心情。毕竟不管你的表现怎么样，它都过去了不是吗？","categories":[],"tags":[{"name":"CSP-J","slug":"CSP-J","permalink":"https://justpureh2o.github.io/tags/CSP-J/"},{"name":"赛后总结","slug":"赛后总结","permalink":"https://justpureh2o.github.io/tags/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"}]}],"categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://justpureh2o.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"学术","slug":"学术","permalink":"https://justpureh2o.github.io/tags/%E5%AD%A6%E6%9C%AF/"},{"name":"OI","slug":"OI","permalink":"https://justpureh2o.github.io/tags/OI/"},{"name":"国祯","slug":"国祯","permalink":"https://justpureh2o.github.io/tags/%E5%9B%BD%E7%A5%AF/"},{"name":"整活","slug":"整活","permalink":"https://justpureh2o.github.io/tags/%E6%95%B4%E6%B4%BB/"},{"name":"文章","slug":"文章","permalink":"https://justpureh2o.github.io/tags/%E6%96%87%E7%AB%A0/"},{"name":"CSP-J","slug":"CSP-J","permalink":"https://justpureh2o.github.io/tags/CSP-J/"},{"name":"赛后总结","slug":"赛后总结","permalink":"https://justpureh2o.github.io/tags/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"}]}